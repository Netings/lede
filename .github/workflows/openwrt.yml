# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt

on:
  push:
    branches: 
      - master
  schedule:
    - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h
      - name: Customs
        run: |
          cd package
          mkdir openwrt-packages
          cd openwrt-packages
          git clone https://github.com/kenzok8/openwrt-packages.git   
          git clone https://github.com/xiaorouji/openwrt-passwall.git # passwall依赖

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # ========================固件定制部分========================
          # 

          # 
          # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
          # 

          # 以下为定制化固件选项和说明:
          #

          #
          # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
          # 
          #          =========================================
          #         |  # 取消编译VMware镜像:                   |
          #         |  cat >> .config <<EOF                   |
          #         |  CONFIG_VMDK_IMAGES=n (y:启用；n:禁用)   |
          #         |  EOF                                    |
          #          =========================================
          #

          # 
          # 以下是一些提前准备好的一些插件选项.
          # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
          # 如果不需要代码块里的某一项配置, 只需要删除相应行.
          #
          # 如果需要其他插件, 请按照示例自行添加.
          # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
          # 
          # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
          # 

          cat >> .config <<EOF

          # 编译x64固件:
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_Generic=y

          # 固件压缩:
          CONFIG_TARGET_IMAGES_GZIP=y

          # 编译UEFI固件:
          CONFIG_EFI_IMAGES=y

          # IPv6支持:
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          CONFIG_PACKAGE_ipv6helper=y

          # 多文件系统支持:
          # CONFIG_PACKAGE_kmod-fs-nfs=y
          # CONFIG_PACKAGE_kmod-fs-nfs-common=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
          # CONFIG_PACKAGE_kmod-fs-nfs-v4=y
          # CONFIG_PACKAGE_kmod-fs-ntfs=y
          # CONFIG_PACKAGE_kmod-fs-squashfs=y

          # USB3.0支持:
          # CONFIG_PACKAGE_kmod-usb-ohci=y
          # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
          # CONFIG_PACKAGE_kmod-usb2=y
          # CONFIG_PACKAGE_kmod-usb2-pci=y
          # CONFIG_PACKAGE_kmod-usb3=y

          # 
          #==============================
          #        常用LuCI插件选择
          #==============================
          #

          # 状态
          # CONFIG_PACKAGE_luci-app-wireguard=y # WireGuard状态
          CONFIG_PACKAGE_luci-app-ramfree=y # 释放内存

          # 系统
          CONFIG_PACKAGE_luci-app-webadmin=y # Web管理页面设置          
          CONFIG_PACKAGE_luci-app-ttyd=y # 网页终端命令行
          CONFIG_PACKAGE_luci-autoreboot=y # 定时重启
          CONFIG_PACKAGE_luci-filetransfer=y # 文件传输

          # 服务
          CONFIG_PACKAGE_luci-app-adbyby-plus=y # 广告屏蔽大师Plus +
          CONFIG_PACKAGE_luci-app-ssr-plus=y # ShadowSocksR Plus+
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y # KcpTun代理
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y # ss代理
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y # ssr代理服务器 
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y # Socks代理
          # CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y # V2ray代理服务器
          CONFIG_PACKAGE_luci-app-luci-app-accesscontrol=n # 上网时间控制 *
          CONFIG_PACKAGE_luci-app-unblockneteasemusic-mini=n # 云解锁网易云音乐 *
          CONFIG_PACKAGE_luci-app-luci-app-ddns=y # 动态DNS
          CONFIG_PACKAGE_luci-app-luci-app-wol=y # 网络唤醒
          # CONFIG_PACKAGE_luci-app-openvpn=y # OpenVPN
          CONFIG_PACKAGE_luci-app-vlmcsd=n # KMS服务器 *
          CONFIG_PACKAGE_luci-app-xlnetacc=n # 迅雷快鸟 *
          # CONFIG_PACKAGE_luci-app-frpc=y # Frp内网穿透
          CONFIG_PACKAGE_luci-app-upnp=y # UPnP *

          # 网络存储
          # CONFIG_PACKAGE_luci-app-kodexplorer=y # 可道云
          # CONFIG_PACKAGE_luci-app-verysync=y # 微力同步
          # CONFIG_PACKAGE_luci-app-hd-idle=y # 硬盘休眠
          CONFIG_PACKAGE_luci-app-samba=y # 网络共享
          # CONFIG_PACKAGE_luci-app-minidlna=y # miniDLNA
          # CONFIG_PACKAGE_luci-app-aria2=y # Aria2下载工具
          CONFIG_PACKAGE_luci-app-vsftpd=y # FTP服务器
          # CONFIG_PACKAGE_luci-app-qbittorrent=y # qBittorrent          
          # CONFIG_PACKAGE_luci-app-baidupcs-web=y # 百度网盘客户端网页版

          # VPN
          # CONFIG_PACKAGE_luci-app-v2ray-server=y # v2ray服务器
          # CONFIG_PACKAGE_luci-app-openvpn-server=y # OpenVPN服务器
          CONFIG_PACKAGE_luci-app-ipsec-vpnd=n # IPSec VPN服务器 *
          ONFIG_PACKAGE_luci-app-zerotier=n # ZeroTier内网穿透 *
          CONFIG_PACKAGE_luci-app-passwall=y #
          # 网络
          CONFIG_PACKAGE_luci-app-arpbind=y # IP/MAC绑定
          # CONFIG_PACKAGE_luci-app-sqm=y # SQM QoS
          # CONFIG_PACKAGE_luci-app-flowoffload=y # Turbo ACC FLOW转发加速
          CONFIG_PACKAGE_luci-app-sfe=y # Turbo ACC 网络加速

          # 带宽监控
          CONFIG_PACKAGE_luci-app-wrtbwmon=y # 实时流量监测

          # LuCI主题:
          # CONFIG_PACKAGE_luci-theme-netgear=y # netgear主题
          CONFIG_PACKAGE_luci-theme-argon=y # argon主题

          # 常用软件包:
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_tree=y
          CONFIG_PACKAGE_vim-fuller=y
          CONFIG_PACKAGE_wget=y

          # 取消编译VMware镜像以及镜像填充:
          CONFIG_VMDK_IMAGES=y # VMware镜像
          CONFIG_TARGET_IMAGES_PAD=n # 镜像填充

          EOF

          # 
          # ========================固件定制部分结束========================
          # 

          sed -i 's/^[ \t]*//g' ./.config

      - name: Make download
        run: |
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
